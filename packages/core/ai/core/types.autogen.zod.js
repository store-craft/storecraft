// Generated by ts-to-zod
import { z } from "zod";

export const contentTextSchema = z
  .object({
    type: z.literal("text"),
    content: z.string(),
  })
  .describe("text content type for messages");

export const contentDeltaTextSchema = z
  .object({
    type: z.literal("delta_text"),
    content: z.string(),
  })
  .describe("partial text content type for messages");

export const contentToolUseSchema = z
  .object({
    type: z.literal("tool_use"),
    content: z.array(
      z.object({
        name: z.string().optional(),
        title: z.string().optional(),
        id: z.string().optional(),
        arguments: z.record(z.any()).optional(),
      }),
    ),
  })
  .describe("tool use content type for messages");

export const contentToolResultSchema = z
  .object({
    type: z.literal("tool_result"),
    content: z.object({
      data: z.object({
        result: z.any().optional(),
        error: z.any().optional(),
      }),
      id: z.string().optional(),
      name: z.string(),
    }),
  })
  .describe("tool result content type for messages")

export const contentImageSchema = z
  .object({
    type: z.literal("image"),
    content: z.string(),
  })
  .describe("image content type for messages");

export const contentJsonSchema = z
  .object({
    type: z.literal("json"),
    content: z.string(),
  })
  .describe("json content type for messages");

export const contentObjectSchema = z
  .object({
    type: z.literal("object"),
    content: z.record(z.any()),
  })
  .describe("object content type for messages");

export const contentErrorSchema = z
  .object({
    type: z.literal("error"),
    content: z.union([
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
      }),
      z.string(),
    ]),
  })
  .describe("error content type for messages");

export const contentSchema = z
  .union([
    contentTextSchema,
    contentDeltaTextSchema,
    contentToolUseSchema,
    contentToolResultSchema,
    contentImageSchema,
    contentJsonSchema,
    contentObjectSchema,
    contentErrorSchema,
  ])
  .describe("A general content type from and to user");

export const messageSchema = z
  .object({
    role: z
      .union([z.literal("user"), z.literal("assistant")])
      .describe("role of the message"),
    contents: z.array(contentSchema).describe("contents of the message"),
  })
  .describe(
    "Unified message type translatable to and\nfrom LLM native message",
  );

  export const chatHistoryTypeSchema = z
  .object({
    thread_id: z.string().optional().describe("The thread / chat id"),
    metadata: z.record(z.any()).describe("The metadata to save"),
    messages: z.array(messageSchema).describe("The chat messages"),
  }).describe(
    "The type being saved in the history",
  );
