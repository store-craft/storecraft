
export interface AI<Config extends any = any> {
  config: Config;
  complete: (input: chat_completion_input) => Promise<chat_completion_result>;
}


export type general_chat_completion_message = {
  content: string;
  role: 'user' | 'developer' | 'system';
  name?: string;
}

export type tool_chat_completion_message = {
  content: string;
  role: 'tool';
  /** Tool call that this message is responding to. **/
  tool_call_id: string;
}

export type chat_completion_input = {
  /**
   * @description ID of the model to use. See the model endpoint compatibility table for details on which models work with the Chat API.
   */
  model: string;
  /**
   * @description A list of messages comprising the conversation so far. Depending on the model you use, different message types (modalities) are supported, like text, images, and audio.
   */
  messages: (general_chat_completion_message | tool_chat_completion_message)[];

  tools?: {
    /**
     * @description The type of the tool. Currently, only function is supported.
     */
    type: 'function' | string;
    function: {
      /**
       * @description The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
       */
      name?: string;
      /**
       * @description The parameters the functions accepts, described as a JSON Schema object. 
       * See the [guide](https://platform.openai.com/docs/guides/function-calling) 
       * for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/reference/object) 
       * for documentation about the format.
       */
      parameters?: object;
      /**
       * @description A description of what the function does, used by the model to choose when and how to call the function.
       */
      description: string;
    }
  }[]
}


export type chat_completion_result = {
  /** A unique identifier for the chat completion. */
  id: string;
  /** The Unix timestamp (in seconds) of when the chat completion was created.   */
  created: number;
  /** The model used for the chat completion. */
  model: string;
  /** A list of chat completion choices. Can be more than one if n is greater than 1. */
  choices: {
    /** The index of the choice in the list of choices. */
    index: number;
    /** A chat completion message generated by the model. */
    message: {
      content: string | null;
      refusal: string | null;
      /** The role of the author of this message. */
      role: string;
      /** The tool calls generated by the model, such as function calls. */
      tool_calls: {
        /** The ID of the tool call. */
        id: string;
        /** The type of the tool. Currently, only function is supported */
        type: string;
        /** The function that the model called. */
        function: {
          /** The name of the function to call. */
          name: string;
          /**
           * @description The arguments to call the function with, as generated by 
           * the model in JSON format. Note that the model does not always generate 
           * valid JSON, and may hallucinate parameters not defined by your 
           * function schema. Validate the arguments in your code before calling 
           * your function.
           */
          arguments: string;
        }
      }[]

    }
  }[]
}