// Generated by ts-to-zod
import { z } from "zod";
export const attributeTypeSchema = z.object({
  key: z.string(),
  value: z.string().optional(),
});
export const authBaseTypeSchema = z.object({
  email: z.string().email(),
  password: z.string().min(4).max(20),
});
export const role2Schema = z.object({
  admin: z.object({
    type: z.literal("admin"),
  }),
  user: z.object({
    type: z.literal("user"),
  }),
});
export const roleSchema = z.union([
  z.literal("admin"),
  z.literal("user"),
  z.string(),
]);
export const apiAuthLoginTypeSchema = authBaseTypeSchema;
export const apiAuthSignupTypeSchema = authBaseTypeSchema;
export const apiAuthRefreshTypeSchema = z.object({
  refresh_token: z.string(),
});
const baseTypeSchema = z.object({
  updated_at: z.string().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  media: z.array(z.string()).optional(),
  attributes: z.array(attributeTypeSchema).optional(),
  tags: z.array(z.string()).optional(),
  desc: z.string().optional(),
});
export const authUserTypeSchema = baseTypeSchema.and(authBaseTypeSchema).and(
  z.object({
    confirmed_mail: z.boolean().optional(),
    roles: z.array(roleSchema).optional(),
  }),
);
export const tagTypeSchema = baseTypeSchema.and(
  z.object({
    handle: z.string(),
    values: z.array(z.string()),
    desc: z.string().optional(),
  }),
);
export const collectionTypeSchema = baseTypeSchema.and(
  z.object({
    handle: z.string(),
    title: z.string(),
    active: z.boolean(),
    _published: z.string().optional(),
  }),
);
export const addressTypeSchema = baseTypeSchema.and(
  z.object({
    firstname: z.string().optional(),
    lastname: z.string().optional(),
    phone_number: z
      .string()
      .regex(/^([+]?d{1,2}[-s]?|)d{3}[-s]?d{3}[-s]?d{4}$/)
      .optional(),
    company: z.string().optional(),
    street1: z.string().optional(),
    street2: z.string().optional(),
    city: z.string().optional(),
    country: z.string().optional(),
    state: z.string().optional(),
    zip_code: z.string().optional(),
    postal_code: z.string().optional(),
  }),
);
export const customerTypeSchema = baseTypeSchema.and(
  z.object({
    firstname: z.string(),
    lastname: z.string(),
    email: z.string().email(),
    phone_number: z
      .string()
      .regex(/^([+]?d{1,2}[-s]?|)d{3}[-s]?d{3}[-s]?d{4}$/)
      .optional(),
    address: addressTypeSchema.optional(),
    tags: z.array(z.string()),
    search_index: z.array(z.string()).optional(),
  }),
);
