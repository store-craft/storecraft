// Generated by ts-to-zod
import { z } from "zod";
export const timestampsSchema = z.object({
  created_at: z.string().optional(),
  updated_at: z.string().optional(),
});
export const searchableSchema = z.object({
  search: z.array(z.string()).optional(),
});
export const idableSchema = z.object({
  id: z.string().optional(),
});
export const attributeTypeSchema = z.object({
  key: z.string(),
  value: z.string().optional(),
});
export const authBaseTypeSchema = z.object({
  email: z.string().email(),
  password: z.string().min(4).max(20),
});
export const roleSchema = z.union([
  z.literal("admin"),
  z.literal("user"),
  z.string(),
]);
export const apiAuthSigninTypeSchema = authBaseTypeSchema;
export const apiAuthSignupTypeSchema = authBaseTypeSchema;
export const apiAuthRefreshTypeSchema = z.object({
  refresh_token: z.string(),
});
export const tagTypeSchema = idableSchema
  .extend(timestampsSchema.shape)
  .extend({
    handle: z.string(),
    values: z.array(z.string()),
  });
export const tagTypeUpsertSchema = tagTypeSchema.omit({
  created_at: true,
  updated_at: true,
});
export const variantOptionSelectionSchema = z.object({
  option_id: z.string(),
  value_id: z.string(),
});
export const textEntitySchema = z.object({
  id: z.string(),
  value: z.string(),
});
export const discountApplicationSchema = z.object({
  id: z.number(),
  name: z.union([z.literal("Automatic"), z.literal("Manual")]),
  name2: z.union([z.literal("automatic"), z.literal("manual")]),
});
export const filterValuePInCollectionsSchema = z.array(
  z.object({
    id: z.string().optional(),
    handle: z.string().optional(),
  }),
);
export const filterValuePNotInCollectionsSchema = z.array(
  z.object({
    id: z.string().optional(),
    handle: z.string().optional(),
  }),
);
export const filterValuePInHandlesSchema = z.array(z.string());
export const filterValuePNotInHandlesSchema = z.array(z.string());
export const filterValuePInTagsSchema = z.array(z.string());
export const filterValuePNotInTagsSchema = z.array(z.string());
export const filterValuePAllSchema = z.any();
export const filterValuePInPriceRangeSchema = z.object({
  from: z.number().optional(),
  to: z.number(),
});
export const filterValueOSubtotalInRangeSchema = z.object({
  from: z.number().optional(),
  to: z.number(),
});
export const filterValueOItemsCountInRangeSchema = z.object({
  from: z.number().optional(),
  to: z.number(),
});
export const filterValueODateInRangeSchema = z.object({
  from: z.number().optional(),
  to: z.number(),
});
export const filterValueOHasCustomersSchema = z.array(z.string());
export const filterMetaSchema = z.object({
  id: z.number(),
  type: z.union([z.literal("product"), z.literal("order")]),
  op: z.union([
    z.literal("p-in-collections"),
    z.literal("p-not-in-collections"),
    z.literal("p-in-handles"),
    z.literal("p-not-in-handles"),
    z.literal("p-in-tags"),
    z.literal("p-not-in-tags"),
    z.literal("p-all"),
    z.literal("p-in-price-range"),
    z.literal("o-subtotal-in-range"),
    z.literal("o-items-count-in-range"),
    z.literal("o-date-in-range"),
    z.literal("o_has_customer"),
  ]),
  name: z.string(),
});
export const discountMetaSchema = z.object({
  id: z.number(),
  type: z.union([
    z.literal("regular"),
    z.literal("bulk"),
    z.literal("buy_x_get_y"),
    z.literal("order"),
    z.literal("bundle"),
  ]),
  name: z.string(),
});
export const regularDiscountExtraSchema = z.object({
  fixed: z.number(),
  percent: z.number(),
});
export const orderDiscountExtraSchema = z.object({
  fixed: z.number(),
  percent: z.number(),
  free_shipping: z.boolean().optional(),
});
export const bulkDiscountExtraSchema = z.object({
  fixed: z.number(),
  percent: z.number(),
  qty: z.number(),
  recursive: z.boolean().optional(),
});
export const bundleDiscountExtraSchema = z.object({
  fixed: z.number(),
  percent: z.number(),
  recursive: z.boolean().optional(),
});
export const addressTypeSchema = z.object({
  firstname: z.string().optional(),
  lastname: z.string().optional(),
  phone_number: z
    .string()
    .regex(/^([+]?d{1,2}[-s]?|)d{3}[-s]?d{3}[-s]?d{4}$ Invalid phone number/)
    .optional(),
  company: z.string().optional(),
  street1: z.string().optional(),
  street2: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
  state: z.string().optional(),
  zip_code: z.string().optional(),
  postal_code: z.string().optional(),
});
export const notificationActionTypeSchema = z.union([
  z.literal("route"),
  z.literal("url"),
]);
export const notificationActionRouteParamsSchema = z.object({
  collection: z.string(),
  document: z.string(),
});
export const notificationActionUrlParamsSchema = z.object({
  new_window: z.boolean().optional(),
  url: z.string(),
});
export const orderContactSchema = z.object({
  firstname: z.string().optional(),
  lastname: z.string().optional(),
  phone_number: z.string().optional(),
  email: z.string().optional(),
  customer_id: z.string().optional(),
});
export const validationEntrySchema = z.object({
  id: z.string(),
  title: z.string().optional(),
  message: z
    .union([
      z.literal("out-of-stock"),
      z.literal("not-enough-stock"),
      z.literal("some-stock-is-on-hold"),
    ])
    .optional(),
});
export const orderPaymentGatewayDataSchema = z.object({
  gateway_handle: z.string(),
  on_checkout_create: z.any().optional(),
  latest_status: z.any().optional(),
});
export const checkoutStatusOptionsSchema = z.object({
  id: z.number(),
  name: z.string(),
  name2: z.union([
    z.literal("created"),
    z.literal("requires_action"),
    z.literal("failed"),
    z.literal("complete"),
  ]),
});
export const paymentStatusOptionsSchema = z.object({
  id: z.number(),
  name: z.string(),
  name2: z.union([
    z.literal("unpaid"),
    z.literal("authorized"),
    z.literal("captured"),
    z.literal("requires_auth"),
    z.literal("voided"),
    z.literal("partially_paid"),
    z.literal("refunded"),
    z.literal("partially_refunded"),
  ]),
});
export const fulfillStatusOptionsSchema = z.object({
  id: z.number(),
  name: z.string(),
  name2: z.union([
    z.literal("draft"),
    z.literal("processing"),
    z.literal("shipped"),
    z.literal("fulfilled"),
    z.literal("cancelled"),
  ]),
});
export const discountErrorSchema = z.object({
  discount_code: z.string(),
  message: z.string(),
});
export const baseTypeSchema = idableSchema.extend({
  media: z.array(z.string()).optional(),
  attributes: z.array(attributeTypeSchema).optional(),
  tags: z.array(z.string()).optional(),
  description: z.string().optional(),
  active: z.boolean().optional(),
});
export const authUserTypeSchema = baseTypeSchema.and(authBaseTypeSchema).and(
  z.object({
    confirmed_mail: z.boolean().optional(),
    roles: z.array(roleSchema).optional(),
  }),
);
export const collectionTypeSchema = baseTypeSchema
  .extend(timestampsSchema.shape)
  .extend({
    handle: z.string(),
    title: z.string(),
    active: z.boolean(),
    published: z.string().optional(),
  });
export const collectionTypeUpsertSchema = collectionTypeSchema.omit({
  created_at: true,
  updated_at: true,
  published: true,
});
export const variantOptionSchema = z.object({
  name: z.string(),
  id: z.string(),
  values: z.array(textEntitySchema),
});
export const filterSchema = z.object({
  meta: filterMetaSchema,
  value: z
    .union([
      filterValuePInCollectionsSchema,
      filterValuePNotInCollectionsSchema,
      filterValuePInHandlesSchema,
      filterValuePNotInHandlesSchema,
      filterValuePInTagsSchema,
      filterValuePNotInTagsSchema,
      filterValuePAllSchema,
      filterValuePInPriceRangeSchema,
      filterValueOSubtotalInRangeSchema,
      filterValueOItemsCountInRangeSchema,
      filterValueODateInRangeSchema,
      filterValueOHasCustomersSchema,
    ])
    .optional(),
});
export const buyXGetYDiscountExtraSchema = z.object({
  fixed: z.number(),
  percent: z.number(),
  qty_x: z.number(),
  qty_y: z.number(),
  filters_y: z.array(filterSchema),
  recursive: z.boolean().optional(),
});
export const shippingMethodTypeSchema = baseTypeSchema
  .extend(timestampsSchema.shape)
  .extend({
    price: z.number().min(0, "Please set a price >= 0"),
    name: z.string(),
    handle: z.string(),
  });
export const postTypeSchema = baseTypeSchema
  .extend(timestampsSchema.shape)
  .extend({
    handle: z.string(),
    title: z.string(),
    text: z.string(),
  });
export const customerTypeSchema = baseTypeSchema
  .extend(timestampsSchema.shape)
  .extend({
    auth_id: z.string().optional(),
    firstname: z.string(),
    lastname: z.string(),
    email: z.string().email(),
    phone_number: z
      .string()
      .regex(/^([+]?d{1,2}[-s]?|)d{3}[-s]?d{3}[-s]?d{4}$/)
      .optional(),
    address: addressTypeSchema.optional(),
  });
export const customerTypeUpsertSchema = customerTypeSchema.omit({
  updated_at: true,
  created_at: true,
});
export const imageTypeSchema = baseTypeSchema
  .extend(timestampsSchema.shape)
  .extend({
    handle: z.string(),
    name: z.string(),
    url: z.string(),
    usage: z.array(z.string()).optional(),
  });
export const imageTypeUpsertSchema = imageTypeSchema.omit({
  updated_at: true,
  created_at: true,
});
export const shippingMethodTypeUpsertSchema = shippingMethodTypeSchema.omit({
  created_at: true,
  updated_at: true,
});
export const postTypeUpsertSchema = postTypeSchema.omit({
  updated_at: true,
  created_at: true,
});
export const settingsTypeSchema = baseTypeSchema;
export const notificationActionSchema = z.object({
  name: z.string().optional(),
  type: notificationActionTypeSchema.optional(),
  params: z
    .union([
      notificationActionRouteParamsSchema,
      notificationActionUrlParamsSchema,
    ])
    .optional(),
});
export const orderStatusSchema = z.object({
  checkout: checkoutStatusOptionsSchema,
  payment: paymentStatusOptionsSchema,
  fulfillment: fulfillStatusOptionsSchema,
});
export const discountDetailsSchema = z.object({
  meta: discountMetaSchema,
  extra: z.union([
    regularDiscountExtraSchema,
    orderDiscountExtraSchema,
    bulkDiscountExtraSchema,
    buyXGetYDiscountExtraSchema,
    bundleDiscountExtraSchema,
  ]),
});
const baseNotificationTypeSchema = z.object({
  message: z.string(),
  author: z.string().optional(),
  actions: z.array(notificationActionSchema).optional(),
  search: z.array(z.string()).optional(),
  id: z.string().optional(),
});
export const notificationTypeSchema = baseNotificationTypeSchema.extend(
  timestampsSchema.shape,
);
export const notificationTypeUpsertSchema = baseNotificationTypeSchema;
export const discountInfoSchema = z.object({
  details: discountDetailsSchema,
  filters: z.array(filterSchema).min(1, "You should Specify at least 1 Filter"),
});
export const discountTypeSchema = baseTypeSchema
  .extend(timestampsSchema.shape)
  .extend({
    active: z.boolean(),
    title: z.string(),
    handle: z.string(),
    priority: z.number(),
    published: z.string().optional(),
    info: discountInfoSchema,
    application: discountApplicationSchema,
  });
export const discountTypeUpsertSchema = discountTypeSchema.omit({
  created_at: true,
  updated_at: true,
});
export const baseProductTypeSchema = baseTypeSchema
  .extend(timestampsSchema.shape)
  .extend({
    handle: z.string(),
    title: z.string(),
    active: z.boolean(),
    video: z.string().optional(),
    price: z.number().min(0),
    qty: z.number().min(0),
    compare_at_price: z.number().min(0).optional(),
    collections: z.array(collectionTypeSchema).optional(),
    discounts: z.array(discountTypeSchema).optional(),
  });
export const variantTypeUpsertSchema = baseProductTypeSchema
  .omit({
    collections: true,
    created_at: true,
    updated_at: true,
    published: true,
    discounts: true,
  })
  .and(
    z.object({
      collections: z.array(collectionTypeSchema.pick({ id: true })).optional(),
    }),
  );
export const productTypeUpsertSchema = baseProductTypeSchema
  .omit({
    collections: true,
    created_at: true,
    updated_at: true,
    published: true,
    discounts: true,
  })
  .and(
    z.object({
      collections: z.array(collectionTypeSchema.pick({ id: true })).optional(),
    }),
  );
export const variantTypeSchema = baseProductTypeSchema.extend({
  parent_handle: z.string().optional(),
  parent_id: z.string().optional(),
  variant_hint: z.array(variantOptionSelectionSchema).optional(),
});
export const productTypeSchema = baseProductTypeSchema.extend({
  variants: z.array(variantTypeSchema).optional(),
  variants_options: z.array(variantOptionSchema).optional(),
});
export const storefrontTypeSchema = baseTypeSchema
  .extend(timestampsSchema.shape)
  .extend({
    handle: z.string(),
    title: z.string(),
    video: z.string().optional(),
    published: z.string().optional(),
    collections: z.array(collectionTypeSchema).optional(),
    products: z.array(productTypeSchema).optional(),
    shipping_methods: z.array(shippingMethodTypeSchema).optional(),
    discounts: z.array(discountTypeSchema).optional(),
    posts: z.array(postTypeSchema).optional(),
  });
export const storefrontTypeUpsertSchema = storefrontTypeSchema.omit({
  created_at: true,
  updated_at: true,
});
export const lineItemSchema = z.object({
  id: z.string(),
  price: z.number().optional(),
  qty: z.number(),
  stock_reserved: z.number().optional(),
  data: productTypeSchema.optional(),
});
export const evoEntrySchema = z.object({
  discount: discountTypeSchema.optional(),
  discount_code: z.string().optional(),
  total_discount: z.number().optional(),
  quantity_undiscounted: z.number().optional(),
  quantity_discounted: z.number().optional(),
  subtotal: z.number().optional(),
  total: z.number().optional(),
  line_items: z.array(lineItemSchema).optional(),
});
export const variantCombinationSchema = z.object({
  selection: z.array(variantOptionSelectionSchema),
  product: productTypeSchema,
});
export const baseCheckoutCreateTypeSchema = z.object({
  contact: orderContactSchema.optional(),
  address: addressTypeSchema.optional(),
  line_items: z.array(lineItemSchema),
  notes: z.string().optional(),
  shipping_method: shippingMethodTypeSchema,
});
export const checkoutCreateTypeSchema = baseCheckoutCreateTypeSchema.extend({
  coupons: z.array(discountTypeSchema.shape.handle).optional(),
});
export const pricingDataSchema = z.object({
  evo: z.array(evoEntrySchema).optional(),
  shipping_method: shippingMethodTypeSchema.optional(),
  subtotal_undiscounted: z.number(),
  subtotal_discount: z.number(),
  subtotal: z.number(),
  total: z.number(),
  quantity_total: z.number(),
  quantity_discounted: z.number(),
  uid: z.string().optional(),
  errors: z.array(discountErrorSchema).optional(),
});
export const orderDataSchema = baseCheckoutCreateTypeSchema
  .extend(baseTypeSchema.shape)
  .extend(timestampsSchema.shape)
  .extend({
    status: orderStatusSchema,
    pricing: pricingDataSchema,
    validation: z.array(validationEntrySchema).optional(),
    payment_gateway: orderPaymentGatewayDataSchema.optional(),
    coupons: z.array(discountTypeSchema).optional(),
  });
export const orderDataUpsertSchema = orderDataSchema.omit({
  updated_at: true,
  created_at: true,
});
